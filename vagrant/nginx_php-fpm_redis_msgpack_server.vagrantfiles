# -*- mode: ruby -*-
# vi: set ft=ruby :

# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
VAGRANTFILE_API_VERSION = "2"

$INSTALL_SCRIPT = <<SCRIPT
yum update
yum upgrade

yum install -y wget
yum -y install epel-release
wget http://rpms.famillecollet.com/enterprise/remi-release-7.rpm
rpm -ivh remi-release-7.rpm

systemctl start firewalld
systemctl enable firewalld

yum install -y git-core zlib zlib-devel gcc-c++ patch readline readline-devel libyaml-devel libffi-devel openssl-devel make bzip2 autoconf automake libtool bison curl sqlite-devel tcl vim

#rpm -Uvh https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
#rpm -Uvh https://mirror.webtatic.com/yum/el7/webtatic-release.rpm

timedatectl set-timezone Asia/Seoul

# rpm -ivh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm
# yum -y install nginx

systemctl start nginx
systemctl enable nginx


wget http://rpms.remirepo.net/enterprise/remi-release-7.rpm
rpm -Uvh remi-release-7.rpm
yum install yum-utils -y
yum-config-manager --enable remi-php71

yum --enablerepo=remi,remi-php71 install php-fpm php-common
yum --enablerepo=remi,remi-php71 install php-opcache php-pecl-apcu php-cli php-pear php-pdo php-mysqlnd php-pgsql php-pecl-mongodb php-pecl-redis php-pecl-memcache php-pecl-memcached php-gd php-mbstring php-mcrypt php-xml



# # Local cache for redis-server
# wget https://github.com/antirez/redis/archive/2.8.24.tar.gz
# tar xvfz 2.8.24.tar.gz
# cd redis-2.8.24/
# make
# sudo make install
# cd utils
# ./install_server.sh

# nginx install
# echo '[nginx]' >> /etc/yum.repos.d/nginx.repo
# echo 'name=nginx repo' >> /etc/yum.repos.d/nginx.repo
# echo 'baseurl=http://nginx.org/packages/centos/$releasever/$basearch/' >> /etc/yum.repos.d/nginx.repo
# echo 'gpgcheck=0' >> /etc/yum.repos.d/nginx.repo
# echo 'enabled=1' >> /etc/yum.repos.d/nginx.repo

# yum -y install nginx

# systemctl enable nginx.service
# systemctl start nginx.service

firewall-cmd --permanent --zone=public --add-service=http
firewall-cmd --permanent --zone=public --add-service=https
firewall-cmd --reload

# yum -y install php php-fpm php-devel php-common php-cli php-pdo php-mysql php-xml php-gd php-mbstring php-pear php-mcrypt php-pecl-zendopcache
# yum install php-pecl-redis
# yum install php-pecl-igbinary

# echo '<?php' >> /var/www/html/info.php
# echo 'phpinfo();' >> /var/www/html/info.php
# echo '?>' >> /var/www/html/info.php

# # change a user and group name
# sed -i "s/user = apache/user = nginx/g" /etc/php-fpm.d/www.conf
# sed -i "s/group = apache/group = nginx/g" /etc/php-fpm.d/www.conf

# # enable listen a user and group
# sed -i "s/;listen.owner = nobody/listen.owner = nobody/g" /etc/php-fpm.d/www.conf
# sed -i "s/;listen.group = nobody/listen.group = nobody/g" /etc/php-fpm.d/www.conf

# sed -i "s/pm = dynamic/pm = static/g" /etc/php-fpm.d/www.conf
# sed -i "s/pm.max_children = 50/pm.max_children = 180/g" /etc/php-fpm.d/www.conf

# sed -i "s/#location ~ \.php$ {/location ~ \.php$ {/g" /etc/nginx/conf.d/default.conf
# sed -i "s/#    root           html;/root           html;/g" /etc/nginx/conf.d/default.conf
# sed -i "s/#    fastcgi_pass   127.0.0.1:9000;/fastcgi_pass   127.0.0.1:9000;/g" /etc/nginx/conf.d/default.conf
# sed -i "s/#    fastcgi_index  index.php;/fastcgi_index  index.php;/g" /etc/nginx/conf.d/default.conf
# sed -i "s/'#    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;'/'fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;'/g" /etc/nginx/conf.d/default.conf
# sed -i "s/#    include        fastcgi_params;/include        fastcgi_params;/g" /etc/nginx/conf.d/default.conf
# sed -i "s/#}/}/g" /etc/nginx/conf.d/default.conf

# gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3
# curl -sSL https://get.rvm.io | bash -s stable --ruby
# source /usr/local/rvm/scripts/rvm
# gem installer bundler
# gem install chef

# sudo bash -c "curl -L https://www.opscode.com/chef/install.sh | bash"
# sudo apt-get update
# sudo apt-get install -y apache2

# cd ~
# wget http://download.redis.io/releases/redis-2.8.24.tar.gz
# tar xzvf redis-2.8.24.tar.gz
# cd redis-2.8.24
# make
# make install
# # update-rc.d redis-server defaults
# # /etc/init.d/redis-server start
SCRIPT

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  # All Vagrant configuration is done here. The most common configuration
  # options are documented and commented below. For a complete reference,
  # please see the online documentation at vagrantup.com.

  # Every Vagrant virtual environment requires a box to build off of.
  config.vm.box = "delta_dev_server"

  # The url from where the 'config.vm.box' box will be fetched if it
  # doesn't already exist on the user's system.
  config.vm.box_url = "http://opscode-vm-bento.s3.amazonaws.com/vagrant/virtualbox/opscode_centos-7.2_chef-provisionerless.box"

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # config.vm.network :forwarded_port, guest: 80, host: 8080

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network :private_network, ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  config.vm.network :public_network

  # If true, then any SSH connections made will enable agent forwarding.
  # Default value: false
  # config.ssh.forward_agent = true

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider :virtualbox do |vb|
  #   # Don't boot with headless mode
  #   vb.gui = true
  #
  #   # Use VBoxManage to customize the VM. For example to change memory:
  #   vb.customize ["modifyvm", :id, "--memory", "1024"]
  # end
  #
  # View the documentation for the provider you're using for more
  # information on available options.

  # Enable provisioning with Puppet stand alone.  Puppet manifests
  # are contained in a directory path relative to this Vagrantfile.
  # You will need to create the manifests directory and a manifest in
  # the file tiny.pp in the manifests_path directory.
  #
  # An example Puppet manifest to provision the message of the day:
  #
  # # group { "puppet":
  # #   ensure => "present",
  # # }
  # #
  # # File { owner => 0, group => 0, mode => 0644 }
  # #
  # # file { '/etc/motd':
  # #   content => "Welcome to your Vagrant-built virtual machine!
  # #               Managed by Puppet.\n"
  # # }
  #
  # config.vm.provision :puppet do |puppet|
  #   puppet.manifests_path = "manifests"
  #   puppet.manifest_file  = "site.pp"
  # end

  # Enable provisioning with chef solo, specifying a cookbooks path, roles
  # path, and data_bags path (all relative to this Vagrantfile), and adding
  # some recipes and/or roles.
  #
  # config.vm.provision :chef_solo do |chef|
  #   chef.cookbooks_path = "../my-recipes/cookbooks"
  #   chef.roles_path = "../my-recipes/roles"
  #   chef.data_bags_path = "../my-recipes/data_bags"
  #   chef.add_recipe "mysql"
  #   chef.add_role "web"
  #
  #   # You may also specify custom JSON attributes:
  #   chef.json = { :mysql_password => "foo" }
  # end

  # Enable provisioning with chef server, specifying the chef server URL,
  # and the path to the validation key (relative to this Vagrantfile).
  #
  # The Opscode Platform uses HTTPS. Substitute your organization for
  # ORGNAME in the URL and validation key.
  #
  # If you have your own Chef Server, use the appropriate URL, which may be
  # HTTP instead of HTTPS depending on your configuration. Also change the
  # validation key to validation.pem.
  #
  # config.vm.provision :chef_client do |chef|
  #   chef.chef_server_url = "https://api.opscode.com/organizations/ORGNAME"
  #   chef.validation_key_path = "ORGNAME-validator.pem"
  # end
  #
  # If you're using the Opscode platform, your validator client is
  # ORGNAME-validator, replacing ORGNAME with your organization name.
  #
  # If you have your own Chef Server, the default validation client name is
  # chef-validator, unless you changed the configuration.
  #
  #   chef.validation_client_name = "ORGNAME-validator"
  	config.vm.define :delta_dev_server do |cfg|
	  config.vm.provider "virtualbox" do |v|
	    v.name = 'delta_dev_server'
	  end
	end
  config.vm.provision "shell", inline: $INSTALL_SCRIPT
end
